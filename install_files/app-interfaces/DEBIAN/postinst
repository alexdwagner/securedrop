#!/bin/sh
# postinst script for securedrop-app-interfaces
#
# see: dh_installdeb(1)
set -e
set -x
# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

case "$1" in
    configure)
        # Use debootstrap to build two chroot jails using the $os_url variable
        if [ -r /lib/lsb/init-functions ]; then
            if [ "$( lsb_release -is )" = "Debian" ]; then
                os="Debian"
                distro="$( lsb_release -c )"
                os_url="http://http.debian.net/debian/"
            else
                os="Ubuntu"
                distro="$( lsb_release -c | cut -f 2 )"
                os_url="http://us.archive.ubuntu.com/ubuntu"
            fi
        fi

        jails='source document'
        for jail in $jails; do
            mkdir -p /etc/schroot/chroot.d/
            cat > /etc/schroot/chroot.d/$jail << EOF
[$jail]
description=$os $distro
directory=/var/chroot/$jail
EOF

            bits="$(uname -m)"
            if [ "$bits" = "x86_64" ]; then
                arch="amd64"
            else
                arch="i386"
            fi

            base_dir="/var/chroot/$jail"
            if [ ! -d $base_dir ]; then
                debootstrap --variant=buildd --arch $arch $distro $base_dir $os_url
            fi

            securedrop_root="$base_dir/var/www/securedrop"
            # Mount the db directory in the jail
            mkdir -p /var/securedrop/db/
            mkdir -p $securedrop_root/db
            if [ ! "$( mount -l | grep "$securedrop_root/db" )" ]; then
                mount -o bind /var/securedrop/db $securedrop_root/db
            fi

            # Mount the keys dir in the jail
            mkdir -m 700 -p /var/securedrop/keys
            mkdir -m 700 -p $securedrop_root/keys
            if [ ! "$(mount -l | grep "$securedrop_root/keys")" ]; then
                mount -o bind /var/securedrop/keys $securedrop_root/keys
            fi

            # Mount the store directory in the jail
            mkdir -p /var/securedrop/store
            mkdir -p /var/chroot/$jail/var/www/securedrop/store
            if [ ! "$(mount -l | grep "$securedrop_root/store")" ]; then
                mount -o bind /var/securedrop/store $securedrop_root/store
            fi

            # Mount proc in the jail
            if [ ! "$(mount -l | grep "$base_dir/proc")" ]; then
                mount -o bind /proc $base_dir/proc
            fi

            # Create script dir in the jail
            mkdir -p $base_dir/opt/securedrop/

            # Copy the current apt sources into the chroot jails
            cp /etc/apt/sources.list $base_dir/etc/apt/sources.list
        done

        . /usr/share/debconf/confmodule

        db_get securedrop-app-interfaces/find_key_path
        app_key_path="$RET"

        db_get securedrop-app-interfaces/app_key_fpr

        db_get securedrop-app-interfaces/verify_fingerprint

        db_get securedrop-app-interfaces/use_custom_header_image
        use_custom_header_image="$RET"

        if [ "$use_custom_header_image" = "true" ]; then
            db_get securedrop-app-interfaces/custom_header_image_path
            custom_header_image_path="$RET"
        fi

        db_get securedrop-app-interfaces/journalist_user
        journalist_user="$RET"

        db_get securedrop-app-interfaces/tor_key_id
        TOR_KEY_ID="$RET"
 
        db_get securedrop-app-interfaces/prod_dev
        is_prod="$RET"
        if [ "$is_prod" = "false" ]; then
            db_get securedrop-app-interfaces/source_deb
            source_deb="$RET"
            db_get securedrop-app-interfaces/document_deb
            document_deb="$RET"
        fi

        db_get securedrop-app-interfaces/app_user
        APP_USER="$RET"

        ## Copy required files and configure chroots
        # Copy gpg key into the chroot jails
        cp $app_key_path /var/chroot/source/root/
        cp $app_key_path /var/chroot/document/root/
        key_file="$(basename $app_key_path)"

        # Verify app gpg key fingerprint and configure debian preseeds for chroot jails      
        # TODO add back option if fingerprint is incorrect
        app_key_fpr="$( gpg --with-fingerprint $app_key_path | awk -F '=' '/Key fingerprint/ {print $2}' | sed 's/ //g')"
 
        # support custom themes
        if [ "$use_custom_header_image" = "true" ]; then
            cp $custom_header_image_path /var/chroot/source/root
            cp $custom_header_image_path /var/chroot/document/root
            image_file="/root/$(echo $custom_header_image_path | awk -F / '{print $NF}')"
        else
            image_file=
        fi

        schroot_source="schroot -c source -u root --directory / --"
        #TODO replace hard coded version in preseed answers
        $schroot_source debconf-set-selections << EOF
securedrop-source-0.2.1 securedrop-source/find_key_path string /root/$key_file
securedrop-source-0.2.1 securedrop-source/verify_fingerprint boolean true
securedrop-source-0.2.1 securedrop-source/app_key_fpr string $app_key_fpr
securedrop-source-0.2.1 securedrop-source/use_custom_header_image boolean $use_custom_header_image
securedrop-source-0.2.1 securedrop-source/custom_header_image_path string $image_file
EOF

        schroot_document="schroot -c document -u root --directory / --"
        #TODO replace hard coded version in pressed answers
        $schroot_document debconf-set-selections << EOF
securedrop-document-0.2.1 securedrop-document/find_key_path string /root/$key_file
securedrop-document-0.2.1 securedrop-document/verify_fingerprint boolean true
securedrop-document-0.2.1 securedrop-document/app_key_fpr string $app_key_fpr
securedrop-document-0.2.1 securedrop-document/use_custom_header_image boolean $use_custom_header_image
securedrop-document-0.2.1 securedrop-document/custom_header_image_path string $image_file
securedrop-document-0.2.1 securedrop-document/journalist_user string $journalist_user
EOF

        copy_add_repos() {
            jail="$1"
            if [ ! -f /var/chroot/$jail/root/add-repos.sh ]; then
                cp /opt/securedrop/add-repos.sh /var/chroot/$jail/root
                schroot -c $jail -u root --directory / --  /root/add-repos.sh
            fi
        }

        copy_add_repos source
        copy_add_repos document

        # If not production copy interface deb packages to respective jails
        if [ "$is_prod" = "false" ]; then
            cp $source_deb /var/chroot/source/root/
            cp $document_deb /var/chroot/document/root/
        fi

        # install pre-dependency apache2-mpm-worker tor
        # or else get error when those packages are installed and restart before postinst that user doesn't exist
        install_stop_predepends() {
            jail="$1"
            pkg="$2"
            service="$3"
            schroot -c $jail -u root --directory / -- apt-get -y install $pkg
            schroot -c $jail -u root --directory / -- service $service stop
        }

        install_stop_predepends document apache2-mpm-worker apache2
        install_stop_predepends document tor tor
        install_stop_predepends source apache2-mpm-worker apache2
        install_stop_predepends source tor tor

        # Install the interface packages using apt-get or gdebi
        if [ "$is_prod" = "false" ]; then
            $schroot_source apt-get install gdebi -y
            source_deb_base="$(basename $source_deb)"
            $schroot_source gdebi --non-interactive /root/$source_deb_base
        else
            $schroot_source apt-get install securedrop-source -y
        fi

        if [ "$is_prod" = "false" ]; then
            $schroot_document apt-get install gdebi -y
            document_deb_base="$(basename $document_deb)"
            $schroot_document gdebi --non-interactive /root/$document_deb_base
        else
            $schroot_document apt-get install securedrop-document -y
        fi

        # The uid for the securedrop user needs to match the uid of the source user in
        # the source chroot and match the uid of the document user in the document
        # chroot. This allows both chroot jails to have access to /var/keys,db,store
        # while each user having a different gid so that they can have different
        # iptables rules defined by process gid.
        create_system_user(){
            system_user="$1"
            system_uid="$2"
            system_gid="$3"
            if [ ! "$(getent passwd $system_user)" ]; then
                addgroup \
                  --system \
                  --gid $system_gid \
                  $system_user
    
                adduser \
                  --system \
                  --shell /bin/false \
                  --no-create-home \
                  --uid $system_uid \
                  --ingroup $system_user \
                  --disabled-password \
                  --disabled-login \
                  $system_user
            fi
        }

        app_uid="666"
        app_gid="666"
        create_system_user $APP_USER $app_uid $app_gid

        chown -R $APP_USER:$APP_USER /var/securedrop


        # only the groups for the source, document, source-tor, document-tor need to
        # exist outside the chroot jails. These are used by iptables to restrict
        # outbound iptables rules by process gid.
        create_system_group(){
            group_name="$1"
            group_gid="$2"
            if [ ! "$(getent group $group_name)" ]; then
                addgroup \
                    --system \
                    --gid $group_gid \
                    $group_name
            fi
        }

        create_system_group source 667
        create_system_group document 668
        create_system_group source-tor 669
        create_system_group document-tor 670

	if [ -x /etc/init.d/securedrop-app ]; then
	    update-rc.d -f securedrop-app defaults
	    invoke-rc.d securedrop-app restart
	fi 

        db_stop
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
